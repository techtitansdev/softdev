generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Users {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  firstName       String
  lastName        String
  address         String
  phone           String
  password        String
  created         DateTime  @default(now())
  updated         DateTime  @updatedAt()
  role            String    @default("USER")
  admins          Admins[]
  donors          Donors[]
}

model Admins {
  id                   String                 @id @default(cuid())
  userEmail            String                 @unique
  user                 Users                  @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  assignAdminBlogs     AssignAdminBlogs[]
  assignAdminsProjects AssignAdminsProjects[]

  @@index([userEmail])
}

model Categories {
  id                      String                    @id @default(cuid())
  name                    String
  assignCategoriesBlog    AssignCategoriesBlog[]
  assignCategoriesProject AssignCategoriesProject[]
}

model Blogs {
  id                   String                 @id @default(cuid())
  title                String
  excerpt              String
  image                String
  content              String
  created              DateTime               @default(now())
  updated              DateTime               @updatedAt()
  published            Boolean                @default(false)
  featured             Boolean                @default(false)
  assignAdminBlogs     AssignAdminBlogs[]
  assignCategoriesBlog AssignCategoriesBlog[]
}

model Projects {
  id                      String                    @id @default(cuid())
  title                   String
  description             String
  image                   String
  hub                     String
  category                String
  type                    String
  beneficiaries           String
  created                 DateTime                  @default(now())
  updated                 DateTime                  @updatedAt()
  about                   String
  published               Boolean                   @default(false)
  featured                Boolean                   @default(false)
  assignAdminsProjects    AssignAdminsProjects[]
  assignCategoriesProject AssignCategoriesProject[]
  fundraisers             Fundraisers[]
}

model Fundraisers {
  id         String     @id @default(cuid())
  projectId  String     @unique()
  funds      Int
  goal       Int
  donors     Int
  targetDate DateTime
  created    DateTime   @default(now())
  updated    DateTime   @updatedAt()
  complete   Boolean    @default(false)
  published  Boolean    @default(false)
  ongoing    Boolean    @default(false)
  featured   Boolean    @default(false)
  project    Projects   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fundings   Fundings[]
  milestones Milestones[]

  @@index([projectId])
}

model Donors {
  id        String     @id @default(cuid())
  userEmail String     @unique
  user      Users      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  fundings  Fundings[]

  @@index([userEmail])
}

model Fundings {
  id            String      @id @default(cuid())
  donorId       String
  fundraiserId  String
  amount        Int
  paymentMethod String
  date          DateTime    @default(now())
  donor         Donors      @relation(fields: [donorId], references: [id], onDelete: Cascade)
  fundraiser    Fundraisers @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)

  @@index([donorId])
  @@index([fundraiserId])
}

model Milestones {
  id           String   @id @default(cuid())
  milestone    String
  value        Int
  unit         String
  description  String
  created      DateTime @default(now())
  updated      DateTime @updatedAt()
  fundraiserId String
  fundraiser   Fundraisers @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  
  @@index([fundraiserId])
}

model AssignAdminBlogs {
  id      String @id @default(cuid())
  adminId String
  blogId  String
  admin   Admins @relation(fields: [adminId], references: [id], onDelete: Cascade)
  blogs   Blogs  @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([blogId])
}

model AssignAdminsProjects {
  id        String   @id @default(cuid())
  adminId   String
  projectId String
  admin     Admins   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([projectId])
}

model AssignCategoriesBlog {
  id         String     @id @default(cuid())
  categoryId String
  blogId     String
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  blog       Blogs      @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([blogId])
}

model AssignCategoriesProject {
  id         String     @id @default(cuid())
  categoryId String
  projectId  String
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  project    Projects   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([projectId])
}
