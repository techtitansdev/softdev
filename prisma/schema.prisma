generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String     @id @default(cuid())
  email           String     @unique
  emailVerified   Boolean    @default(false)
  emailVerifiedAt DateTime?
  firstName       String
  lastName        String
  address         String
  phone           String
  password        String
  created         DateTime   @default(now())
  updated         DateTime   @updatedAt()
  role            String     @default("USER")
  admins          Admins[]
  Feedback        Feedback[]
  Donors          Donors?
}

model Admins {
  id                   String                 @id @default(cuid())
  userEmail            String                 @unique
  user                 Users                  @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  assignAdminBlogs     AssignAdminBlogs[]
  assignAdminsProjects AssignAdminsProjects[]

  @@index([userEmail])
}

model Categories {
  id                      String                    @id @default(cuid())
  label                   String
  value                   String                    @unique
  assignCategoriesBlog    AssignCategoriesBlog[]
  assignCategoriesProject AssignCategoriesProject[]
}

model Category {
  id    Int    @id @default(autoincrement())
  label String
  value String @unique
}

model Blogs {
  id                   String                 @id @default(cuid())
  title                String
  excerpt              String
  image                String
  imageId              String
  blogTitle            String
  blogDescription      String
  blogImage            String
  blogImageId          String
  blogDescription1     String
  blogImage1           String
  blogImage1Id         String
  blogDescription2     String
  blogImage2           String
  blogImage2Id         String
  created              DateTime               @default(now())
  updated              DateTime               @updatedAt()
  published            Boolean                @default(false)
  featured             Boolean                @default(false)
  assignAdminBlogs     AssignAdminBlogs[]
  assignCategoriesBlog AssignCategoriesBlog[]
}

model Projects {
  id                      String                    @id @default(cuid())
  title                   String
  description             String
  image                   String
  imageId                 String
  hub                     String
  category                String
  type                    String
  beneficiaries           String
  created                 DateTime                  @default(now())
  updated                 DateTime                  @updatedAt()
  published               Boolean                   @default(false)
  featured                Boolean                   @default(false)
  assignAdminsProjects    AssignAdminsProjects[]
  assignCategoriesProject AssignCategoriesProject[]
  fundraisers             Fundraisers[]
  Feedback                Feedback[]
  about                   About[]
}

model About {
  id                      String @id @default(cuid())
  projectId               String @unique()
  projectTitle            String
  projectDescription      String
  projectLink             String
  projectImage            String
  projectObjDescription   String
  projectObjImage         String
  projectName1            String
  projectName1Description String
  projectName1Image       String
  projectName2            String
  projectName2Description String
  projectName2Image       String
  theme                   String
  projectImageId          String
  objectiveImageId        String
  projectName1ImageId     String
  projectName2ImageId     String

  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId]) // Relation field to link multiple Projects to About
}

model Fundraisers {
  id         String       @id @default(cuid())
  projectId  String       @unique()
  funds      Int
  goal       Int
  donors     Int
  targetDate DateTime
  created    DateTime     @default(now())
  updated    DateTime     @updatedAt()
  complete   Boolean      @default(false)
  published  Boolean      @default(false)
  ongoing    Boolean      @default(false)
  featured   Boolean      @default(false)
  project    Projects     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fundings   Fundings[]
  milestones Milestones[]

  @@index([projectId])
}

model Donors {
  id        String     @id @default(cuid())
  userEmail String     @unique
  user      Users      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  fundings  Fundings[]

  @@index([userEmail])
}

model Fundings {
  id            String      @id @default(cuid())
  fullName      String
  email         String
  contact       String
  date          DateTime    @default(now())
  fundraiserId  String
  amount        Int
  paymentMethod String
  donatedAs     String
  fundraiser    Fundraisers @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  Donors        Donors?     @relation(fields: [donorsId], references: [id])
  donorsId      String?

  @@index([fundraiserId])
  @@index([donorsId])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  feedback  String
  created   DateTime @default(now())

  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
}

model Milestones {
  id           String      @id @default(cuid())
  milestone    String
  value        Int
  unit         String
  description  String
  created      DateTime    @default(now())
  updated      DateTime    @updatedAt()
  date         DateTime
  done         Boolean
  fundraiserId String
  fundraiser   Fundraisers @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)

  @@index([fundraiserId])
}

model AssignAdminBlogs {
  id      String @id @default(cuid())
  adminId String
  blogId  String
  admin   Admins @relation(fields: [adminId], references: [id], onDelete: Cascade)
  blogs   Blogs  @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([blogId])
}

model AssignAdminsProjects {
  id        String   @id @default(cuid())
  adminId   String
  projectId String
  admin     Admins   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([projectId])
}

model AssignCategoriesBlog {
  id         String     @id @default(cuid())
  categoryId String
  blogId     String
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  blog       Blogs      @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([blogId])
}

model AssignCategoriesProject {
  id         String     @id @default(cuid())
  categoryId String
  projectId  String
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  project    Projects   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([projectId])
}
