import React, { useEffect, useState } from "react";
import Head from "next/head";
import { Sidebar } from "~/components/Sidebar";

import Unauthorized from "~/components/Unauthorized";
import { api } from "~/utils/api";
import { Modal } from "~/components/Modal";
import { useUser } from "@clerk/nextjs";
import LoadingSpinner from "~/components/LoadingSpinner";
import { AdminConfirmModal } from "~/components/administratorModal";

const Administrators = () => {
  const { user, isLoaded } = useUser();
  const user_role = user?.publicMetadata.admin ? "ADMIN" : "USER";

  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false); // State for Add Admin modal
  const [errorMessage, setErrorMessage] = useState("");
  const [userDetails, setUserDetails] = useState(null);
  const [userId, setUserId] = useState("");
  const [newAdminEmail, setNewAdminEmail] = useState("");
  const [selectedAdminEmail, setSelectedAdminEmail] = useState(""); // State to store selected admin email
  const {
    data: adminData,
    isLoading: isAdminsLoading,
    refetch,
  } = api.user.getAdmins.useQuery();

  const setRole = api.user.setRole.useMutation({
    onSuccess: () => {
      refetch();
      setIsRemoveModalOpen(false);
      setIsAddModalOpen(false); // Close Add Admin modal after success
    },
    onError: (error) => {
      setErrorMessage(
        error.message || "An error occurred while updating the role.",
      );
    },
  });

  useEffect(() => {}, [isLoaded, user_role]);

  const handleRemoveAdmin = async () => {
    if (selectedAdminEmail) {
      await updateRole(selectedAdminEmail, "user");
      setRole.mutate({ email: selectedAdminEmail, role: "user" });
    }
  };

  const handleOpenRemoveModal = async (adminEmail: string) => {
    setSelectedAdminEmail(adminEmail);
    await handleGetUserDetails(adminEmail);
    setIsRemoveModalOpen(true);
  };

  const handleAddAdmin = async () => {
    if (newAdminEmail) {
      await handleGetUserDetails(newAdminEmail);
      setIsAddModalOpen(true);
    }
  };

  const handleConfirmAddAdmin = async () => {
    await updateRole(newAdminEmail, "admin");
    setRole.mutate({ email: newAdminEmail, role: "admin" });
    setNewAdminEmail("")
  };

  const handleGetUserDetails = async (email: string) => {
    console.log("Fetching user details...");
    try {
      const response = await fetch("/api/getUserList", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: email, // Use the user's ID
        }),
      });

      // Check if the response is successful
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      // Parse the JSON from the response
      const data = await response.json();
      setUserId(data);
      // Log or use the data received
      console.log(data);

      // If you need to use the value elsewhere, you can return it
      return data;
    } catch (error) {
      console.error("Error fetching user details:", error);
      return null;
    }
  };

  const updateRole = async (email: string, role: string) => {
    handleGetUserDetails(email);
    try {
      if (!user) {
        throw new Error("User not found");
      }

      const res = await fetch("/api/updateMetadataClerk", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          role,
          userId: userId, // Use the user's ID
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "An error occurred");
      }
    } catch (error) {
      if (error instanceof Error) {
        setErrorMessage(
          error.message || "An error occurred while updating the role.",
        );
      } else {
        setErrorMessage("An unknown error occurred.");
      }
    }
  };

  if (!isLoaded || isAdminsLoading) {
    return <LoadingSpinner />;
  }

  if (user_role !== "ADMIN") {
    return <Unauthorized />;
  }

  return (
    <>
      <Head>
        <title>Administrator | Global Shapers</title>
        <meta name="description" content="Generated by create-next-app" />
        <link rel="icon" href="/gsi-logo.png" />
      </Head>

      <div className="flex">
        <Sidebar />
        <div className="mx-auto w-full max-w-[1350px] p-10">
          <div className="mt-16 border-b border-black pb-4 text-2xl font-normal text-gray-800 md:text-3xl">
            ADMINISTRATOR
          </div>
          <div className="mt-8">

            <Modal
              isOpen={!!errorMessage}
              onClose={() => setErrorMessage("")}
              message={errorMessage}
              bgColor="bg-red-500"
            />
            <div className="grid grid-cols-2 gap-4">
              <input
                placeholder="Enter admin email"
                value={newAdminEmail}
                onChange={(e) => setNewAdminEmail(e.target.value)}
                className="rounded border border-gray-300 p-2"
              />
              <button
                onClick={handleAddAdmin}
                className="rounded bg-blue-800 px-4 py-2 text-white hover:bg-blue-700"
              >
                Add
              </button>
            </div>

            {adminData && adminData.length > 0 ? (
              <ul>
                {adminData.map((admin) => (
                  <li
                    key={admin.id}
                    className="flex items-center justify-between border-b border-gray-200 p-2"
                  >
                    <span>{admin.email}</span>
                    <button
                      onClick={() => handleOpenRemoveModal(admin.email)} // Open modal with selected admin email
                      className="ml-4 rounded bg-red-500 px-4 py-1 text-white hover:bg-red-700"
                    >
                      Remove
                    </button>
                  </li>
                ))}
              </ul>
            ) : (
              <p>No administrators found.</p>
            )}

            {userDetails && (
              <div className="mt-4 rounded bg-gray-100 p-4">
                <h3>User Details:</h3>
                {/* Render the user details here */}
                <pre>{JSON.stringify(userDetails, null, 2)}</pre>
              </div>
            )}

            {/* Confirmation Modal for Removing Admin */}
            <AdminConfirmModal
              isOpen={isRemoveModalOpen}
              onClose={() => setIsRemoveModalOpen(false)}
              message={`Are you sure you want to remove ${selectedAdminEmail} as an administrator?`}
              onConfirm={handleRemoveAdmin} // Confirm button triggers removal
              bgColor="bg-yellow-gray"
            />

            {/* Confirmation Modal for Adding Admin */}
            <AdminConfirmModal
              isOpen={isAddModalOpen}
              onClose={() => setIsAddModalOpen(false)}
              message={`Are you sure you want to add ${newAdminEmail} as an administrator?`}
              onConfirm={handleConfirmAddAdmin} // Confirm button triggers adding
              bgColor="bg-blue-gray"
            />
          </div>
        </div>
      </div>
    </>
  );
};

export default Administrators;
