import { useUser } from "@clerk/nextjs";
import { useQueryClient } from "@tanstack/react-query";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { Footer } from "~/components/Footer";
import { Navbar } from "~/components/Navbar";
import { api } from "~/utils/api";

interface Funding {
  title: string;
  description: string;
  image: string;
}

const Payment = () => {
  const router = useRouter();
  const { id } = router.query;
  const [fundingData, setFundingData] = useState<Funding | null>(null);
  const [contributionType, setContributionType] = useState("Individual");
  const [fullName, setFullName] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [email, setEmail] = useState("");
  const [amount, setAmount] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("");
  const [paymentError, setPaymentError] = useState<string | null>(null);

  const getFunding = api.fundraiser.getById.useQuery({ id: id as string });
  const payment = api.paymentRouter.createPaymentIntent.useMutation();
  const createPaymentMethod =
    api.paymentRouter.createPaymentMethod.useMutation();
  const createGcashPaymentMethod =
    api.paymentRouter.createGCashPaymentMethod.useMutation();
  const attachPaymentIntent =
    api.paymentRouter.attachPaymentIntent.useMutation();
  const updateFunds = api.fundraiser.updateFunds.useMutation();
  const user = useUser();
  const updateDonor = api.donors.createDonor.useMutation();
  const createFunding = api.donors.createFunding.useMutation();
  const userEmail = user.user?.emailAddresses[0]?.emailAddress || "";
  const checkEmail = api.donors.checkEmailExists.useQuery({
    email: userEmail,
  });
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setPaymentError(null);
    const convertedAmount = parseInt(amount, 10) * 100;

    try {
      const paymentIntentResponse = await payment.mutateAsync({
        amount: convertedAmount,
      });

      if (paymentIntentResponse?.data.id) {
        // const paymentMethodResponse = await createGcashPaymentMethod.mutateAsync({
        //   email: email,
        //   name: fullName,
        //   phone: phoneNumber
        // });
        const paymentMethodResponse = await createPaymentMethod.mutateAsync({
          details: {
            card_number: "4343434343434345",
            exp_month: 12,
            exp_year: 25,
            cvc: "123",
          },
          billing: {
            name: fullName,
            address: {
              line1: "123 Test St",
              city: "Test City",
              state: "Test State",
              postal_code: "12345",
              country: "PH",
              line2: "Apt 1",
            },
            phone: phoneNumber,
            email: email,
          },
        });
        const idString = id?.toString() || "";
        attachPaymentIntent.mutate({
          payment_method: paymentMethodResponse.data.id,
          paymentIntentId: paymentIntentResponse?.data.id,
          client_key: paymentIntentResponse?.data.attributes.client_key,
          fundingId: idString,
        });
        updateFunds.mutate({
          id: idString,
          funds: parseInt(amount, 10),
        });

        if (checkEmail.data == false) {
          updateDonor.mutate({
            userEmail: userEmail,
          });
        }

        createFunding.mutate({
          fundraiserId: idString,
          amount: parseInt(amount, 10),
          donorEmail: userEmail,
          paymentMethod: "card"
        })
        router.push(`http://localhost:3000/funded-projects/${id}`);
        // Further processing with paymentMethodResponse if needed
      } else {
        setPaymentError("Failed to create payment intent.");
      }
    } catch (error) {
      console.error("Payment error:", error);
      setPaymentError(
        "An error occurred during payment. Please try again later.",
      );
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (getFunding.data) {
          const fundingData: Funding = {
            title: getFunding.data.project.title,
            description: getFunding.data.project.description,
            image: getFunding.data.project.image,
          };
          setFundingData(fundingData);
        }
      } catch (error) {
        console.error("Error fetching funding data:", error);
      }
    };
    fetchData();
  }, [getFunding.data]);

  return (
    <>
      <Head>
        <title>Payment | Global Shapers</title>
        <meta name="description" content="Generated by create-next-app" />
        <link rel="icon" href="/gsi-logo.png" />
      </Head>

      <Navbar />

      <form
        onSubmit={handleSubmit}
        className="mx-auto mb-16 mt-24 flex max-w-[1300px] flex-col justify-between md:mt-32 lg:flex-row"
      >
        <div className="flex w-full flex-col items-center justify-center lg:w-1/2">
          {fundingData && (
            <div className="flex w-11/12 flex-col md:w-10/12 lg:w-11/12">
              <div className="mx-1 text-base font-normal text-gray-700 md:text-lg">
                YOU ARE DONATING TO:
              </div>
              <div className="mx-1 mb-4 text-3xl font-semibold text-gray-700 md:text-4xl">
                {fundingData.title}
              </div>
              <img
                src={fundingData.image}
                className="mb-2 h-[350px] w-full rounded-lg shadow-md md:h-96"
                alt={fundingData.title}
              />
              <div className="md:text-normal text-medium mx-1 line-clamp-3 text-sm font-light">
                {fundingData.description}
              </div>
            </div>
          )}
        </div>

        <div className="flex w-full flex-col items-center justify-center lg:w-1/2">
          <p className="mt-12 text-xl font-medium md:text-2xl lg:mt-0">
            Contribute As:
          </p>
          <div className="mt-2 flex flex-row items-center">
            <div className="mt-2 inline-flex items-center">
              <input
                type="radio"
                name="contributionType"
                value="Individual"
                className="h-6 w-6 text-gray-600"
                checked={contributionType === "Individual"}
                onChange={() => setContributionType("Individual")}
                data-testid="Individual"
              />
              <span className="ml-2 mr-4 text-sm font-light md:text-lg">
                Individual
              </span>
            </div>
            <div className="mt-2 inline-flex items-center">
              <input
                type="radio"
                name="contributionType"
                value="Company"
                className="h-6 w-6 text-gray-600"
                checked={contributionType === "Company"}
                onChange={() => setContributionType("Company")}
                data-testid="Company"
              />
              <span className="ml-2 mr-4 text-sm font-light md:text-lg">
                Company
              </span>
            </div>
            <div className="mr-4 mt-2 inline-flex items-center">
              <input
                type="radio"
                name="contributionType"
                value="Anonymous"
                className="h-6 w-6 text-gray-600"
                checked={contributionType === "Anonymous"}
                onChange={() => setContributionType("Anonymous")}
                data-testid="Anonymous"
              />
              <span className="ml-2 text-sm font-light md:text-lg">
                Anonymous
              </span>
            </div>
          </div>
          {contributionType !== "Anonymous" && (
            <>
              <input
                type="text"
                placeholder="Full Name"
                className="my-2 w-11/12 border-b border-gray-800 py-2 pl-2 pr-3 text-sm text-black outline-none focus:outline-none md:w-10/12 md:text-base lg:w-9/12"
                value={fullName}
                required
                onChange={(e) => setFullName(e.target.value)}
              />
              <input
                type="tel"
                placeholder="Phone Number"
                className="my-2 w-11/12 border-b border-gray-800 py-2 pl-2 pr-3 text-sm text-black outline-none focus:outline-none md:w-10/12 md:text-base lg:w-9/12"
                value={phoneNumber}
                required
                onChange={(e) => setPhoneNumber(e.target.value)}
              />
              <input
                type="text"
                placeholder="Email Address"
                className="my-2 w-11/12 border-b border-gray-800 py-2 pl-2 pr-3 text-sm text-black outline-none focus:outline-none md:w-10/12 md:text-base lg:w-9/12"
                value={email}
                required
                onChange={(e) => setEmail(e.target.value)}
              />
            </>
          )}

          <input
            type="number"
            min="0"
            placeholder="Amount"
            className="mt-6 w-11/12 rounded-md border border-gray-400 py-4 pl-4 pr-4 text-sm shadow-lg md:w-10/12 md:text-base lg:w-9/12"
            value={amount}
            required
            onChange={(e) => setAmount(e.target.value)}
          />

          <input
            type="text"
            placeholder="Payment Method"
            className="mt-6 w-11/12 rounded-md border border-gray-400 py-4 pl-4 pr-4 text-sm shadow-lg md:w-10/12 md:text-base lg:w-9/12"
            value={paymentMethod}
            required
            onChange={(e) => setPaymentMethod(e.target.value)}
          />

          {paymentError && <div className="text-red-500">{paymentError}</div>}

          <button
            type="submit"
            className="mt-6 w-11/12 rounded-lg border border-gray-400 bg-blue-800 py-2 text-white hover:bg-blue-900 sm:w-10/12 lg:w-9/12 "
          >
            Pay Now
          </button>
        </div>
      </form>

      <Footer />
    </>
  );
};

export default Payment;
